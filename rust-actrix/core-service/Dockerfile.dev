# FROM rustlang/rust:nightly


# # Install cargo dependencies
# # RUN cargo install diesel_cli --no-default-features --features postgres
# # RUN cargo install cargo-watch

# # Copy files
# WORKDIR /usr/src/app
# COPY ./ ./

# # Install Dependencies
# RUN cargo build --workspace

# EXPOSE 8080
# VOLUME ["/usr/local/cargo"]
# # CMD ["cargo", "watch", "-c", "-x", "run"]
# # CMD ["cargo", "run"]


# Rust as the base image
FROM rust:1.66 as builder

# Create a new empty shell project
RUN USER=root mkdir core-service
RUN USER=root cd core-service
RUN USER=root cargo new --bin server
WORKDIR /core-service

# Copy our manifests
# # Copy './server'
# COPY ./server ./server

# # copy './database'
# COPY ./database ./database

# Copy Cargo.lock && Cargo.toml from './database'
COPY ./database/Cargo.lock ./database/Cargo.lock
COPY ./database/Cargo.toml ./database/Cargo.toml
# Copy Cargo.lock && Cargo.toml from './server'
COPY ./server/Cargo.lock ./server/Cargo.lock
COPY ./server/Cargo.toml ./server/Cargo.toml
# Copy Cargo.lock && Cargo.toml from './'
COPY ./Cargo.lock ./Cargo.lock
COPY ./Cargo.toml ./Cargo.toml

# Build only the dependencies to cache them
RUN pwd
RUN cargo build --workspace
RUN rm -rf ./database
RUN rm -rf ./server

# Copy the source code
COPY ./database ./database
COPY ./server ./server
COPY ./.env ./.env
COPY ./wait_for_it.sh ./wait_for_it.sh


CMD ["cargo", "run"]

# Build for release.
# RUN rm ./target/release/deps/server*
# RUN cargo build --release

# # The final base image
# # FROM debian:bullseye-slim
# # Trys to use slim bullseye
# FROM rust:1.66-slim-bullseye

# # Copy from the previous build
# COPY --from=builder /core-service/.env /usr/src/.env
# COPY --from=builder /core-service/wait_for_it.sh /usr/src/wait_for_it.sh
# COPY --from=builder /core-service/target/release/server /usr/src/server

# # Run the installed missed
# # CMD sudo yum install postgresql-devel
# # Run the binary
# CMD /usr/src/server
